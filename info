WebSocket enables real-time communication between a client and the server. It allows the server to push data to the client without the client explicitly requesting it.

Client : 
--> The client establishes a WebSocket connection to the server (localhost:8080).
--> The client sends all the drawing data including the coordinates and the color to the server.

Server:
--> The server listens for incoming WebSocket connections on port 8080.
--> When the client connects, the server sends the current canvas state to the client for synchronization.
--> All the drawing data or clear requests is broadcasted by the server to all the connected clients.


Communication : 

The client firsts establishes a WebSocket connection to the server. As mentioned above , the current canvas state is sent to the client. Now when the user draws on the canvas, the client sends the drawing data (start and end coordinates, color) to the server which is then added to the canvasState by the server and is broadcasted to all the connected clients for real-time collaboration. When the user clicks the "Clear" button, the client sends a clear request to the server. After receiving the request, The server clears the canvasState and broadcasts the clear request to all clients.

Canvas Rendering :

The HTML5 <canvas> element has been used to render the whiteboard.
Drawing Logic : 
When the user presses the mouse button , the "mousedown" event is triggered and the draw flag is turned to true to indicate that the user is drawing and the starting coordinates of the line are captured.

When the user releases the mouse button , the "mouseup" event is triggered and the draw flag is turned to false to indicate that the user has stopped drawing.

Now the "mousemove" event is triggered when the mouse is moving. It checks if the draw flag is true(i.e., the user is holding the mouse button) and captures the current mouse coordinates (currentX, currentY) and sends it to the server.

The "drawline" function draws a line on the canvas using the provided start and end coordinates and color. It uses the Canvas API. First it sets the color of the line which is generated randomly for each user using the getRandomColor() function. Now a new path is started and the cursor is moved to the starting coordinates. Then the line is drawn from starting coordinates to the ending coordinates.

Basically , When the user draws, the client performs two actions. Firstly, The client sends the drawing data to the server as already mentioned. Secondly, the drawline() function is used by the client to render the lines on the canvas locally.	


State Synchronization : 

The server maintains the canvas state, which is an array of all the strokes drawn on the canvas.When a new client connects, the server sends the current canvasState to the client and the client renders all the strokes in canvasState on their local canvas. When the server receives drawing data from a client, it adds the data to canvasState and broadcasts it to all connected clients.

Giving a summary , lets suppose there are two users A and B. User A draws on the whiteboard (press the mouse button , move and then release it). Now the client sends the drawing data to the server. The server then broadcasts this data to all the connected clients (i.e. User B) and so User B is able to see what User A draws.


Reconnections:

If the WebSocket connection is closed , the client attempts to reconnect after 1 second: "setTimeout(connectWebSocket, 1000);"
